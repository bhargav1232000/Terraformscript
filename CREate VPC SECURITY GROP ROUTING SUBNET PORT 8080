#provider plugin
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}
# provider
provider "aws" {
region = "us-east-1"
}
# Resources
# Create a VPC
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/20"
  enable_dns_support = true
  enable_dns_hostnames = true

  tags = {
    Name = "my-vpc"
  }
}

# Create an Internet Gateway
resource "aws_internet_gateway" "my_igw" {
  vpc_id = aws_vpc.my_vpc.id

  tags = {
    Name = "my-igw"
  }
}

# Create a subnet
resource "aws_subnet" "my_subnet" {
  vpc_id                  = aws_vpc.my_vpc.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "us-east-1a"  # Update with your availability zone
  map_public_ip_on_launch = true

  tags = {
    Name = "my-subnet-1"
  }
}
resource "aws_subnet" "my_subnet2" {
  vpc_id = aws_vpc.my_vpc.id
  cidr_block = "10.0.2.0/24"
  availability_zone = "us-east-1b"
  map_public_ip_on_launch = false

tags={
Name="my-subnet-2"
}
}

# Create a route table
resource "aws_route_table" "my_route_table" {
  vpc_id = aws_vpc.my_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.my_igw.id
  }

  tags = {
    Name = "my-route-table"
  }
}

# Associate subnet with the route table
resource "aws_route_table_association" "my_subnet_association" {
  subnet_id      = aws_subnet.my_subnet.id
  route_table_id = aws_route_table.my_route_table.id
}
resource "aws_route_table_association" "my_subnet_association2" {
subnet_id= aws_subnet.my_subnet2.id
route_table_id = aws_route_table.my_route_table.id
}
##### VPC subnets internetgateway routes completed#####
#### beginning of ec2 instance creation and web hosting###
resource "aws_security_group" "my_security_group" {
  vpc_id      = aws_vpc.my_vpc.id 
  name        = "my-security-group"
  description = "Allow inbound traffic on port 8080"
  
  ingress {
    from_port = 8080
    to_port   = 8080
    protocol  = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }


  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"  # Allow all outbound traffic
    cidr_blocks = ["0.0.0.0/0"]
  }
}
resource "aws_instance" "my_instance" {
  ami             = "ami-0fc5d935ebf8bc3bc"  # Update with your AMI ID
  instance_type   = "t2.micro"     # Update with your desired instance type
  key_name        = "kp101323"  # Update with your key pair name
  security_groups  = [aws_security_group.my_security_group.id]
  subnet_id       = aws_subnet.my_subnet.id

  user_data = <<-EOF
              #!/bin/bash
               sudo apt-get update
               sudo apt-get install -y docker.io
               sleep 2
               sudo docker run --name mywebsite -d -p 8080:80 analyticsbd/anonimage
               EOF
  tags = {
    Name = "my-instance"
  }
}
